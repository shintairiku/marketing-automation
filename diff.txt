diff --git a/.kiro/specs/admin-auth-dashboard/design.md b/.kiro/specs/admin-auth-dashboard/design.md
index f9617a6..283150f 100644
--- a/.kiro/specs/admin-auth-dashboard/design.md
+++ b/.kiro/specs/admin-auth-dashboard/design.md
@@ -2,9 +2,9 @@
 
 ## Overview
 
-The admin authentication and dashboard system provides secure, Clerk organization-based access to platform administrative functions. The system leverages Clerk's organization membership and verified domain features to restrict access to authorized personnel, implementing centralized authorization middleware and a monitoring dashboard that serves as the foundation for the broader administrative interface.
+The admin authentication and dashboard system provides secure, Google Workspace SSO-restricted access to platform administrative functions. The system implements a comprehensive authentication layer, centralized authorization middleware, and a monitoring dashboard that serves as the foundation for the broader administrative interface.
 
-The design follows a domain-driven architecture pattern, separating authentication concerns, user management, organization management, and system monitoring into distinct but integrated components. The system leverages Clerk organization membership (org_31qpu3arGjKdiatiavEP9E7H3LV) with verified domain "shintairiku.jp" for authentication, Supabase for data persistence, and integrates with Stripe for subscription management.
+The design follows a domain-driven architecture pattern, separating authentication concerns, user management, organization management, and system monitoring into distinct but integrated components. The system leverages existing infrastructure including Clerk for authentication, Supabase for data persistence, and integrates with Stripe for subscription management.
 
 ## Architecture
 
@@ -76,17 +76,18 @@ sequenceDiagram
     
     Admin->>Frontend: Access admin page
     Frontend->>Middleware: Request with JWT token
-    Middleware->>Clerk: Verify JWT signature and organization membership
-    Clerk-->>Middleware: Token validation and organization membership result
-    Middleware->>Middleware: Check organization ID (org_31qpu3arGjKdiatiavEP9E7H3LV)
+    Middleware->>Clerk: Verify JWT signature
+    Clerk-->>Middleware: Token validation result
+    Middleware->>Middleware: Check hosted domain (hd claim)
+    Middleware->>Middleware: Verify against allowed domains
     
-    alt Valid Organization Member
-        Middleware->>DB: Verify admin privileges in database
+    alt Valid Google Workspace Domain
+        Middleware->>DB: Check admin privileges
         DB-->>Middleware: Admin status confirmed
         Middleware->>Audit: Log successful admin access
         Middleware-->>Frontend: Access granted
         Frontend-->>Admin: Admin interface loaded
-    else Invalid Organization or Not Member
+    else Invalid Domain or Personal Gmail
         Middleware->>Audit: Log failed access attempt
         Middleware-->>Frontend: 403 Forbidden
         Frontend-->>Admin: Access denied message
@@ -97,22 +98,22 @@ sequenceDiagram
 
 ### 1. Authentication Components
 
-#### Clerk Organization Validator
+#### Google Workspace SSO Validator
 **Location**: `backend/app/common/auth.py`
 
 **Responsibilities**:
 - Validate JWT tokens from Clerk
-- Extract and verify organization membership claims
-- Check against designated admin organization ID
-- Validate organization membership status
+- Extract and verify hosted domain (hd) claim
+- Check against allowed Google Workspace domains
+- Reject personal Gmail accounts (@gmail.com)
 
 **Interface**:
 ```python
-class ClerkOrganizationValidator:
-    def __init__(self, admin_org_id: str)
+class GoogleWorkspaceValidator:
+    def __init__(self, allowed_domains: List[str])
     async def validate_admin_token(self, token: str) -> AdminUser
-    async def extract_organization_from_token(self, token: str) -> Optional[str]
-    def is_admin_organization_member(self, org_id: str) -> bool
+    async def extract_domain_from_token(self, token: str) -> Optional[str]
+    def is_personal_gmail(self, email: str) -> bool
 ```
 
 #### Admin Authorization Middleware
@@ -253,8 +254,7 @@ class AdminUser:
     user_id: str
     email: str
     full_name: str
-    organization_id: str
-    organization_slug: str
+    workspace_domain: str
     admin_privileges: List[str]
     last_login: datetime
     session_id: str
@@ -307,12 +307,12 @@ class AdminAuthenticationError(Exception):
     """Raised when admin authentication fails"""
     pass
 
-class InvalidOrganizationError(AdminAuthenticationError):
-    """Raised when user is not member of admin organization"""
+class InvalidWorkspaceDomainError(AdminAuthenticationError):
+    """Raised when user domain is not in allowed list"""
     pass
 
-class OrganizationMembershipRequiredError(AdminAuthenticationError):
-    """Raised when organization membership is required but not found"""
+class PersonalGmailNotAllowedError(AdminAuthenticationError):
+    """Raised when personal Gmail account is used"""
     pass
 ```
 
@@ -322,10 +322,10 @@ class OrganizationMembershipRequiredError(AdminAuthenticationError):
 {
   "error": {
     "code": "ADMIN_AUTH_FAILED",
-    "message": "Authentication failed: Not a member of admin organization",
+    "message": "Authentication failed: Invalid workspace domain",
     "details": {
-      "user_organization": "org_user123",
-      "required_organization": "org_31qpu3arGjKdiatiavEP9E7H3LV"
+      "domain": "personal-domain.com",
+      "allowed_domains": ["company.com", "subsidiary.com"]
     },
     "timestamp": "2025-01-20T10:30:00Z",
     "request_id": "req_123456"
diff --git a/.kiro/specs/admin-auth-dashboard/requirements.md b/.kiro/specs/admin-auth-dashboard/requirements.md
index c3fb264..4ca26d4 100644
--- a/.kiro/specs/admin-auth-dashboard/requirements.md
+++ b/.kiro/specs/admin-auth-dashboard/requirements.md
@@ -8,17 +8,17 @@ The admin system is part of a larger administrative interface that will eventual
 
 ## Requirements
 
-### Requirement 1: Clerk Organization-Based Admin Authentication
+### Requirement 1: Google Workspace SSO Authentication
 
-**User Story:** As a platform administrator, I want to authenticate using Clerk organization membership with verified domain restrictions, so that access is restricted to authorized personnel from our Google Workspace domain.
+**User Story:** As a platform administrator, I want to authenticate using only company-issued Google Workspace accounts, so that access is restricted to authorized personnel and personal Gmail accounts are blocked.
 
 #### Acceptance Criteria
 
-1. WHEN an administrator attempts to sign in THEN the system SHALL verify they are a member of the designated Clerk organization (org_31qpu3arGjKdiatiavEP9E7H3LV)
-2. WHEN a user tries to authenticate without organization membership THEN Clerk SHALL automatically reject the authentication attempt
-3. WHEN a user authenticates with a verified domain account THEN Clerk SHALL handle domain verification automatically using the verified "shintairiku.jp" domain
-4. WHEN JWT token verification is enabled THEN the system SHALL validate token signatures and organization membership claims
-5. WHEN an unauthorized user attempts access THEN the system SHALL return a 403 Forbidden response with appropriate error message
+1. WHEN an administrator attempts to sign in THEN the system SHALL only accept Google Workspace SSO authentication
+2. WHEN a user tries to authenticate with a personal Gmail account (@gmail.com) THEN the system SHALL reject the authentication attempt
+3. WHEN a user authenticates with a Google Workspace account THEN the system SHALL verify the hosted domain (hd) claim matches the allowed domain list
+4. WHEN JWT token verification is enabled THEN the system SHALL validate token signatures and claims
+5. WHEN an unauthorized domain is used THEN the system SHALL return a 403 Forbidden response with appropriate error message
 6. WHEN authentication succeeds THEN the system SHALL set admin privilege flags and create an audit log entry
 
 ### Requirement 2: Admin Authorization Middleware
@@ -27,11 +27,11 @@ The admin system is part of a larger administrative interface that will eventual
 
 #### Acceptance Criteria
 
-1. WHEN an admin endpoint is accessed THEN the system SHALL verify Clerk organization membership using the @require_admin decorator
-2. WHEN organization membership verification fails THEN the system SHALL return a 403 Forbidden response
+1. WHEN an admin endpoint is accessed THEN the system SHALL verify admin privileges using the @require_admin decorator
+2. WHEN admin verification fails THEN the system SHALL return a 403 Forbidden response
 3. WHEN admin operations are performed THEN the system SHALL automatically log all actions to the audit system
 4. WHEN JWT tokens are invalid or expired THEN the system SHALL reject the request with appropriate error codes
-5. WHEN admin middleware is applied THEN the system SHALL extract user context and organization membership and make it available to the endpoint
+5. WHEN admin middleware is applied THEN the system SHALL extract user context and make it available to the endpoint
 
 ### Requirement 3: Admin Dashboard Overview
 
diff --git a/.kiro/specs/admin-auth-dashboard/tasks.md b/.kiro/specs/admin-auth-dashboard/tasks.md
index 9ed90f8..7e41602 100644
--- a/.kiro/specs/admin-auth-dashboard/tasks.md
+++ b/.kiro/specs/admin-auth-dashboard/tasks.md
@@ -1,16 +1,16 @@
 # Implementation Plan
 
 - [ ] 1. Set up admin authentication infrastructure
-  - Create Clerk organization membership validation system with JWT token verification
-  - Implement organization membership checking logic
-  - Add environment variable configuration for admin organization ID
+  - Create Google Workspace SSO validation system with JWT token verification
+  - Implement domain checking logic to reject personal Gmail accounts
+  - Add environment variable configuration for allowed workspace domains
   - _Requirements: 1.1, 1.2, 1.3, 1.4, 1.5, 1.6_
 
-- [x] 1.1 Implement Clerk organization validator
-  - Write ClerkOrganizationValidator class with JWT token parsing
-  - Create organization membership extraction and validation methods
-  - Implement admin organization membership verification logic
-  - Add comprehensive error handling for invalid tokens and organization membership
+- [ ] 1.1 Implement Google Workspace domain validator
+  - Write GoogleWorkspaceValidator class with JWT token parsing
+  - Create domain extraction and validation methods
+  - Implement personal Gmail detection and rejection logic
+  - Add comprehensive error handling for invalid tokens and domains
   - _Requirements: 1.1, 1.2, 1.3, 1.5_
 
 - [ ] 1.2 Create admin authorization middleware
@@ -21,8 +21,8 @@
   - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5_
 
 - [ ] 1.3 Configure environment variables and settings
-  - Add ADMIN_ORGANIZATION_ID configuration (org_31qpu3arGjKdiatiavEP9E7H3LV)
-  - Set up ADMIN_ORGANIZATION_SLUG configuration (shintairiku-admin)
+  - Add ADMIN_GOOGLE_WORKSPACE_DOMAINS configuration
+  - Set up ADMIN_EMAILS and ADMIN_USER_IDS lists
   - Enable CLERK_JWT_VERIFICATION_ENABLED for production
   - Update core config with admin-specific settings
   - _Requirements: 1.1, 1.4, 1.6_
@@ -206,7 +206,7 @@
 
 - [ ] 9.1 Create admin exception hierarchy
   - Implement AdminAuthenticationError and subclasses
-  - Create InvalidOrganizationError and OrganizationMembershipRequiredError
+  - Create InvalidWorkspaceDomainError and PersonalGmailNotAllowedError
   - Add AdminOperationError for general admin operation failures
   - Create proper error message formatting
   - _Requirements: 7.2_
@@ -247,9 +247,9 @@
   - _Requirements: 9.1, 9.2, 9.3, 9.4, 9.5_
 
 - [ ] 11.1 Write unit tests for authentication components
-  - Test ClerkOrganizationValidator with various organization membership scenarios
+  - Test GoogleWorkspaceValidator with various domain scenarios
   - Create tests for admin authorization middleware
-  - Test JWT token validation and organization membership verification
+  - Test JWT token validation and error handling
   - Add tests for audit logging functionality
   - _Requirements: 1.1, 1.2, 1.3, 1.4, 1.5, 2.1, 2.2, 6.1_
 
diff --git a/backend/.env.example b/backend/.env.example
index 4c1a919..8c765f2 100644
--- a/backend/.env.example
+++ b/backend/.env.example
@@ -34,11 +34,6 @@ SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 CLERK_SECRET_KEY=sk_live_...
 CLERK_PUBLISHABLE_KEY=pk_live_...
 
-# Clerk設定 (組織用)
-ADMIN_ORGANIZATION_ID=org_...
-ADMIN_ORGANIZATION_SLUG=
-CLERK_JWT_VERIFICATION_ENABLED=true
-
 # Google Cloud / Vertex AI設定（画像生成用）
 GOOGLE_CLOUD_PROJECT=your-project-id
 GOOGLE_CLOUD_LOCATION=us-central1
diff --git a/backend/app/common/auth.py b/backend/app/common/auth.py
index 074569a..a272ce5 100644
--- a/backend/app/common/auth.py
+++ b/backend/app/common/auth.py
@@ -3,18 +3,11 @@
 Authentication utilities for Clerk integration
 """
 import jwt
-from fastapi import Depends, HTTPException
+from fastapi import Depends
 from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
 from typing import Optional
 import logging
 
-from app.domains.admin.auth.clerk_validator import ClerkOrganizationValidator, AdminUser
-from app.domains.admin.auth.exceptions import (
-    AdminAuthenticationError,
-    InvalidJWTTokenError,
-    OrganizationMembershipRequiredError
-)
-
 logger = logging.getLogger(__name__)
 
 security = HTTPBearer(auto_error=False)
@@ -119,154 +112,4 @@ def get_current_user_id_from_header(authorization: Optional[str] = None) -> str:
         
     except Exception as e:
         logger.error(f"🔒 [AUTH] Error extracting user ID from header: {e}")
-        raise ValueError(f"Authentication error: {e}")
-
-
-# ===== ADMIN AUTHENTICATION FUNCTIONS =====
-
-# Initialize admin validator
-_admin_validator = None
-
-def get_admin_validator() -> ClerkOrganizationValidator:
-    """Get or create the admin validator singleton"""
-    global _admin_validator
-    if _admin_validator is None:
-        _admin_validator = ClerkOrganizationValidator()
-    return _admin_validator
-
-
-def get_current_admin_user(authorization: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> AdminUser:
-    """
-    Extract and validate admin user from Clerk JWT token with organization membership verification.
-    
-    This function performs comprehensive admin authentication:
-    1. Validates JWT token structure and signature
-    2. Extracts organization membership data from token claims
-    3. Verifies membership in the admin organization
-    4. Validates admin permissions within the organization
-    
-    Args:
-        authorization: Authorization header with Bearer token
-        
-    Returns:
-        AdminUser object with validated admin access and organization membership
-        
-    Raises:
-        HTTPException: If token is invalid, user lacks admin organization membership, 
-                      or has insufficient permissions
-    """
-    if not authorization:
-        logger.error("🛡️  [ADMIN_AUTH] No authorization header found - admin authentication required")
-        raise HTTPException(
-            status_code=401, 
-            detail="Admin authorization header required"
-        )
-    
-    try:
-        token = authorization.credentials
-        logger.info(f"🛡️  [ADMIN_AUTH] Validating admin token for user authentication")
-        
-        validator = get_admin_validator()
-        admin_user = validator.validate_token_and_extract_admin_user(token)
-        
-        logger.info(f"✅ [ADMIN_AUTH] Admin authentication successful")
-        logger.info(f"   User ID: {admin_user.user_id}")
-        logger.info(f"   Email: {admin_user.email}")
-        logger.info(f"   Admin Org: {admin_user.admin_organization_membership.organization_id}")
-        logger.info(f"   Role: {admin_user.admin_organization_membership.role}")
-        
-        return admin_user
-        
-    except InvalidJWTTokenError as e:
-        logger.error(f"❌ [ADMIN_AUTH] Invalid JWT token: {e.message}")
-        raise HTTPException(
-            status_code=401, 
-            detail=f"Invalid admin token: {e.message}"
-        )
-        
-    except OrganizationMembershipRequiredError as e:
-        logger.error(f"❌ [ADMIN_AUTH] Organization membership required: {e.message}")
-        logger.error(f"   User organizations: {e.details.get('user_organizations', [])}")
-        logger.error(f"   Required organization: {e.details.get('required_organization_id')}")
-        raise HTTPException(
-            status_code=403, 
-            detail="Admin organization membership required"
-        )
-        
-    except AdminAuthenticationError as e:
-        logger.error(f"❌ [ADMIN_AUTH] Admin authentication error: {e.message}")
-        logger.error(f"   Error code: {e.error_code}")
-        logger.error(f"   Details: {e.details}")
-        
-        # Map admin errors to HTTP status codes
-        status_code = 403 if e.error_code == "INSUFFICIENT_PERMISSIONS" else 401
-        raise HTTPException(
-            status_code=status_code, 
-            detail=e.message
-        )
-        
-    except Exception as e:
-        logger.error(f"❌ [ADMIN_AUTH] Unexpected admin authentication error: {e}")
-        logger.exception("[ADMIN_AUTH] Full exception details:")
-        raise HTTPException(
-            status_code=500, 
-            detail="Admin authentication system error"
-        )
-
-
-def get_current_admin_user_id(authorization: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> str:
-    """
-    Extract admin user ID from validated admin token.
-    
-    Args:
-        authorization: Authorization header with Bearer token
-        
-    Returns:
-        User ID of authenticated admin user
-        
-    Raises:
-        HTTPException: If admin authentication fails
-    """
-    admin_user = get_current_admin_user(authorization)
-    return admin_user.user_id
-
-
-def verify_admin_organization_membership(token: str) -> bool:
-    """
-    Verify if a JWT token belongs to a user with admin organization membership.
-    
-    Args:
-        token: JWT token string
-        
-    Returns:
-        True if user has valid admin organization membership, False otherwise
-    """
-    try:
-        validator = get_admin_validator()
-        validator.validate_token_and_extract_admin_user(token)
-        return True
-    except Exception as e:
-        logger.debug(f"🔍 [ADMIN_AUTH] Admin membership verification failed: {e}")
-        return False
-
-
-def get_user_admin_organizations(token: str) -> list:
-    """
-    Get list of organizations where the user has admin privileges.
-    
-    Args:
-        token: JWT token string
-        
-    Returns:
-        List of organization IDs where user has admin access
-    """
-    try:
-        validator = get_admin_validator()
-        organizations = validator.get_user_organizations(token)
-        
-        # For now, return all organizations since we're primarily checking admin org membership
-        # In the future, this could be enhanced to check admin roles in multiple organizations
-        return organizations
-    except Exception as e:
-        logger.error(f"❌ [ADMIN_AUTH] Error getting user admin organizations: {e}")
-        return []
\ No newline at end of file
+        raise ValueError(f"Authentication error: {e}") 
\ No newline at end of file
diff --git a/backend/app/core/config.py b/backend/app/core/config.py
index 8493df4..d7f840c 100644
--- a/backend/app/core/config.py
+++ b/backend/app/core/config.py
@@ -31,11 +31,6 @@ class Settings(BaseSettings):
     # Clerk設定 (optional)
     clerk_secret_key: str = Field(default_factory=lambda: os.getenv("CLERK_SECRET_KEY", ""))
     clerk_publishable_key: str = Field(default_factory=lambda: os.getenv("CLERK_PUBLISHABLE_KEY", ""))
-    
-    # Admin認証設定
-    admin_organization_id: str = Field(default_factory=lambda: os.getenv("ADMIN_ORGANIZATION_ID", ""))
-    admin_organization_slug: str = Field(default_factory=lambda: os.getenv("ADMIN_ORGANIZATION_SLUG", ""))
-    clerk_jwt_verification_enabled: bool = Field(default_factory=lambda: os.getenv("CLERK_JWT_VERIFICATION_ENABLED", "true").lower() == "true")
 
     # Stripe設定 (optional)
     stripe_secret_key: str = Field(default_factory=lambda: os.getenv("STRIPE_SECRET_KEY", ""))
diff --git a/backend/app/domains/admin/__init__.py b/backend/app/domains/admin/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/backend/app/domains/admin/auth/README.md b/backend/app/domains/admin/auth/README.md
deleted file mode 100644
index 4bfa165..0000000
--- a/backend/app/domains/admin/auth/README.md
+++ /dev/null
@@ -1,113 +0,0 @@
-## 概要
-
-`ClerkOrganizationValidator` は、Clerk の JWT を最小限にデコードし、組織メンバーシップを抽出して、管理者用の組織に所属しているかつ十分なロール（owner / admin）を持つかを検証するためのユーティリティです。
-
-- JWT の最小検証（`sub` と未失効の `exp` を要求）
-- 一般的なクレーム形式からの組織メンバーシップ抽出（単一のアクティブ組織 + 配列クレーム）
-- 設定済みの管理者組織 ID/Slug とロールのチェック
-- 例外クラスは `backend/app/domains/admin/auth/exceptions.py` を参照
-
-注意: 現状、JWT 署名検証は未接続（`verify_signature=False`）。本番運用では Clerk の公開鍵/JWKS を用いた署名検証の導入が推奨
-
-## 前提設定（環境変数）
-
-- `ADMIN_ORGANIZATION_ID`（管理者組織の ID）
-- `ADMIN_ORGANIZATION_SLUG`（管理者組織の Slug）
-- `CLERK_JWT_VERIFICATION_ENABLED`（将来の署名検証切り替え用フラグ／現状はログ用途）
-
-上記２つの値は、Clerk の Organization の設定から取得できます。
-これらは `backend/app/core/config.py` の `settings` から読み込まれます。
-
-## 基本的な使い方（バリデータを直接使用）
-
-```python
-from app.domains.admin.auth.clerk_validator import ClerkOrganizationValidator
-from app.domains.admin.auth.exceptions import (
-    InvalidJWTTokenError,
-    OrganizationMembershipRequiredError,
-    InsufficientPermissionsError,
-    InvalidOrganizationError,
-)
-
-validator = ClerkOrganizationValidator()
-
-try:
-    admin_user = validator.validate_token_and_extract_admin_user(token)
-    # 利用例
-    print(admin_user.user_id)
-    print(admin_user.email)
-    print(admin_user.admin_organization_membership.organization_id)
-    print(admin_user.admin_organization_membership.role)
-except InvalidJWTTokenError as e:
-    # 401 相当: トークン不正/失効
-    ...
-except OrganizationMembershipRequiredError as e:
-    # 403 相当: 管理者組織のメンバーでない
-    ...
-except InsufficientPermissionsError as e:
-    # 403 相当: ロールが admin/owner ではない
-    ...
-except InvalidOrganizationError as e:
-    # 組織クレームの形式異常等
-    ...
-```
-
-組織一覧だけが必要な場合は、次のヘルパーを使えます。
-
-```python
-org_ids = validator.get_user_organizations(token)  # List[str]
-```
-
-## FastAPI での利用（推奨）
-
-共通の依存関数は `backend/app/common/auth.py` に用意されています。これを使うと、エラーハンドリングが HTTP レスポンスにマッピングされます。
-
-```python
-from fastapi import APIRouter, Depends
-from app.domains.admin.auth.clerk_validator import AdminUser
-from app.common.auth import get_current_admin_user
-
-router = APIRouter()
-
-@router.get("/admin/secure")
-def secured_endpoint(admin: AdminUser = Depends(get_current_admin_user)):
-    return {
-        "user_id": admin.user_id,
-        "email": admin.email,
-        "org_id": admin.admin_organization_membership.organization_id,
-        "role": admin.admin_organization_membership.role,
-    }
-```
-
-`get_current_admin_user` は内部で `ClerkOrganizationValidator` を使用し、以下を実施します。
-- JWT の最小検証とクレームの抽出
-- 管理者組織メンバーシップの有無チェック
-- ロール（owner/admin）の検証
-- エラーを `HTTPException(401/403/500)` に変換
-
-管理者ユーザーの ID のみが必要な場合は、`get_current_admin_user_id` を利用できます。
-
-```python
-from app.common.auth import get_current_admin_user_id
-
-@router.get("/admin/user-id")
-def admin_user_id(user_id: str = Depends(get_current_admin_user_id)):
-    return {"user_id": user_id}
-```
-
-## 例外クラス（概要）
-
-- `InvalidJWTTokenError`: トークンが不正・形式異常・失効
-- `OrganizationMembershipRequiredError`: 管理者組織に所属していない
-- `InsufficientPermissionsError`: 所属しているがロール不足（admin/owner 以外）
-- `InvalidOrganizationError`: 組織クレームの構造が不正
-
-## 実装メモ
-
-- 現状、署名検証は未接続（`jwt.decode(..., options={"verify_signature": False})`）。将来、Clerk の公開鍵/JWKS 連携により有効化予定。
-- トークンからの組織抽出は以下を優先：
-  - 単一アクティブ組織: `org_id|organization_id`, `org_slug|organization_slug`, `org_role|organization_role`
-  - 配列形式: `org_memberships|organization_memberships`
-- 必須クレームは `sub` と未失効の `exp` のみ。その他は極力シンプルに保ち、必要に応じて拡張する。
-
-
diff --git a/backend/app/domains/admin/auth/__init__.py b/backend/app/domains/admin/auth/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/backend/app/domains/admin/auth/clerk_validator.py b/backend/app/domains/admin/auth/clerk_validator.py
deleted file mode 100644
index 7d3c031..0000000
--- a/backend/app/domains/admin/auth/clerk_validator.py
+++ /dev/null
@@ -1,316 +0,0 @@
-"""
-Clerk Organization Validator
-
-Focused responsibilities:
-- Decode and minimally validate Clerk JWT
-- Extract organization membership with common claim shapes
-- Ensure membership in configured admin organization with admin-level role
-"""
-
-import jwt
-import logging
-from typing import Dict, List, Optional, Any
-from datetime import datetime
-from dataclasses import dataclass
-
-from app.core.config import settings
-from .exceptions import (
-    InvalidJWTTokenError,
-    OrganizationMembershipRequiredError,
-    InvalidOrganizationError,
-    InsufficientPermissionsError
-)
-
-logger = logging.getLogger(__name__)
-
-
-@dataclass
-class OrganizationMembership:
-    """Represents a user's membership in a Clerk organization"""
-    organization_id: str
-    organization_slug: str
-    role: str
-    permissions: List[str]
-    metadata: Dict[str, Any]
-
-
-@dataclass
-class AdminUser:
-    """Represents an authenticated admin user"""
-    user_id: str
-    email: str
-    organization_memberships: List[OrganizationMembership]
-    admin_organization_membership: Optional[OrganizationMembership]
-    token_claims: Dict[str, Any]
-
-
-class ClerkOrganizationValidator:
-    """
-    Validates Clerk JWT tokens and organization memberships for admin authentication.
-    
-    This class handles:
-    - JWT token parsing and validation
-    - Organization membership extraction from token claims
-    - Admin organization membership verification
-    - Comprehensive error handling for authentication failures
-    """
-    
-    def __init__(self):
-        self.admin_organization_id = settings.admin_organization_id
-        self.admin_organization_slug = settings.admin_organization_slug
-        self.jwt_verification_enabled = settings.clerk_jwt_verification_enabled
-        
-        logger.debug("ClerkOrganizationValidator initialized")
-    
-    def parse_jwt_token(self, token: str) -> Dict[str, Any]:
-        """
-        Parse and validate a Clerk JWT token.
-        
-        Args:
-            token: The JWT token string
-            
-        Returns:
-            Dict containing the decoded token claims
-            
-        Raises:
-            InvalidJWTTokenError: If token is invalid, malformed, or expired
-        """
-        try:
-            # NOTE: Signature verification intentionally disabled until Clerk public key wiring is added
-            decoded_token = jwt.decode(token, options={"verify_signature": False})
-            self._validate_token_structure(decoded_token)
-            return decoded_token
-        except jwt.ExpiredSignatureError as e:
-            raise InvalidJWTTokenError("JWT token has expired", str(e))
-        except jwt.InvalidTokenError as e:
-            raise InvalidJWTTokenError("Invalid JWT token", str(e))
-        except Exception as e:
-            raise InvalidJWTTokenError(f"Token parsing failed: {str(e)}", str(e))
-    
-    def _validate_token_structure(self, token_claims: Dict[str, Any]) -> None:
-        """
-        Validate that the JWT token has the required structure and claims.
-        
-        Args:
-            token_claims: Decoded JWT claims
-            
-        Raises:
-            InvalidJWTTokenError: If token structure is invalid
-        """
-        # minimal requirements: user identifier and non-expired token
-        required_fields = ['sub', 'exp']
-        missing_fields = [field for field in required_fields if not token_claims.get(field)]
-        
-        if missing_fields:
-            raise InvalidJWTTokenError(f"JWT token missing required fields: {', '.join(missing_fields)}")
-        
-        # Validate expiration
-        exp = token_claims.get('exp')
-        if exp and datetime.fromtimestamp(exp) < datetime.utcnow():
-            raise InvalidJWTTokenError("JWT token has expired")
-    
-    def extract_organization_memberships(self, token_claims: Dict[str, Any]) -> List[OrganizationMembership]:
-        """
-        Extract organization membership data from JWT token claims.
-        
-        Args:
-            token_claims: Decoded JWT claims
-            
-        Returns:
-            List of OrganizationMembership objects
-            
-        Raises:
-            InvalidOrganizationError: If organization data is malformed
-        """
-        try:
-            memberships: List[OrganizationMembership] = []
-
-            # Active organization fields (most common single-org case)
-            active_org_id = token_claims.get('org_id') or token_claims.get('organization_id')
-            if active_org_id:
-                memberships.append(
-                    OrganizationMembership(
-                        organization_id=active_org_id,
-                        organization_slug=(
-                            token_claims.get('org_slug')
-                            or token_claims.get('organization_slug')
-                            or active_org_id
-                        ),
-                        role=(token_claims.get('org_role') or token_claims.get('organization_role') or 'member'),
-                        permissions=token_claims.get('org_permissions', []),
-                        metadata={}
-                    )
-                )
-
-            # Fallback: array-based memberships
-            org_membership_data = (
-                token_claims.get('org_memberships')
-                or token_claims.get('organization_memberships')
-            )
-            if org_membership_data:
-                raw_list = org_membership_data if isinstance(org_membership_data, list) else [org_membership_data]
-                for item in raw_list:
-                    org_info = item.get('organization') or item.get('org') or {}
-                    org_id = org_info.get('id') or org_info.get('organization_id') or org_info.get('org_id')
-                    if not org_id:
-                        continue
-                    memberships.append(
-                        OrganizationMembership(
-                            organization_id=org_id,
-                            organization_slug=(
-                                org_info.get('slug')
-                                or org_info.get('organization_slug')
-                                or org_info.get('org_slug')
-                                or org_id
-                            ),
-                            role=item.get('role', 'member'),
-                            permissions=item.get('permissions', []),
-                            metadata={}
-                        )
-                    )
-
-            return memberships
-        except Exception as e:
-            raise InvalidOrganizationError(
-                "Failed to extract organization data",
-                validation_error=str(e)
-            )
-    
-    def _parse_membership_data(self, membership_data: Dict[str, Any]) -> Optional[OrganizationMembership]:
-        """
-        Parse individual membership data from token claims.
-        
-        Args:
-            membership_data: Raw membership data from token
-            
-        Returns:
-            OrganizationMembership object or None if parsing fails
-        """
-        try:
-            org_info = membership_data.get('organization') or membership_data.get('org') or membership_data
-            org_id = org_info.get('id') or org_info.get('organization_id') or org_info.get('org_id')
-            if not org_id:
-                return None
-            return OrganizationMembership(
-                organization_id=org_id,
-                organization_slug=(
-                    org_info.get('slug')
-                    or org_info.get('organization_slug')
-                    or org_info.get('org_slug')
-                    or org_id
-                ),
-                role=membership_data.get('role', 'member'),
-                permissions=membership_data.get('permissions', []),
-                metadata={}
-            )
-        except Exception:
-            return None
-    
-    def validate_admin_organization_membership(
-        self, 
-        memberships: List[OrganizationMembership]
-    ) -> OrganizationMembership:
-        """
-        Validate that the user has membership in the admin organization.
-        
-        Args:
-            memberships: List of user's organization memberships
-            
-        Returns:
-            The admin organization membership
-            
-        Raises:
-            OrganizationMembershipRequiredError: If user is not a member of admin organization
-        """
-        # Find admin organization membership by ID or slug
-        admin_membership: Optional[OrganizationMembership] = None
-        for membership in memberships:
-            if (
-                membership.organization_id == self.admin_organization_id
-                or membership.organization_slug == self.admin_organization_slug
-            ):
-                admin_membership = membership
-                break
-        
-        if not admin_membership:
-            raise OrganizationMembershipRequiredError(
-                message="Admin organization membership required",
-                required_organization_id=self.admin_organization_id,
-                user_organizations=[m.organization_id for m in memberships]
-            )
-        
-        # Validate admin permissions within the organization
-        self._validate_admin_permissions(admin_membership)
-        
-        return admin_membership
-    
-    def _validate_admin_permissions(self, admin_membership: OrganizationMembership) -> None:
-        """
-        Validate that the user has sufficient permissions within the admin organization.
-        
-        Args:
-            admin_membership: The user's admin organization membership
-            
-        Raises:
-            InsufficientPermissionsError: If user lacks required admin permissions
-        """
-        admin_roles = ['owner', 'admin']
-        user_role = (admin_membership.role or '').lower()
-        if user_role not in admin_roles:
-            raise InsufficientPermissionsError(
-                message=f"User role '{user_role}' does not have admin privileges",
-                organization_id=admin_membership.organization_id,
-                required_role="admin or owner",
-                user_role=user_role
-            )
-    
-    def validate_token_and_extract_admin_user(self, token: str) -> AdminUser:
-        """
-        Complete validation flow: parse token, extract memberships, validate admin access.
-        
-        Args:
-            token: JWT token string
-            
-        Returns:
-            AdminUser object with validated admin access
-            
-        Raises:
-            InvalidJWTTokenError: If token is invalid
-            OrganizationMembershipRequiredError: If user lacks admin organization membership
-            InvalidOrganizationError: If organization data is malformed
-            InsufficientPermissionsError: If user lacks admin permissions
-        """
-        try:
-            token_claims = self.parse_jwt_token(token)
-            user_id = token_claims.get('sub')
-            user_email = token_claims.get('email') or token_claims.get('email_address') or ''
-            memberships = self.extract_organization_memberships(token_claims)
-            admin_membership = self.validate_admin_organization_membership(memberships)
-            admin_user = AdminUser(
-                user_id=user_id,
-                email=user_email,
-                organization_memberships=memberships,
-                admin_organization_membership=admin_membership,
-                token_claims=token_claims
-            )
-            return admin_user
-            
-        except Exception as e:
-            raise
-    
-    def get_user_organizations(self, token: str) -> List[str]:
-        """
-        Get a list of organization IDs that the user belongs to.
-        
-        Args:
-            token: JWT token string
-            
-        Returns:
-            List of organization IDs
-            
-        Raises:
-            InvalidJWTTokenError: If token is invalid
-        """
-        token_claims = self.parse_jwt_token(token)
-        memberships = self.extract_organization_memberships(token_claims)
-        return [membership.organization_id for membership in memberships]
\ No newline at end of file
diff --git a/backend/app/domains/admin/auth/exceptions.py b/backend/app/domains/admin/auth/exceptions.py
deleted file mode 100644
index c5d3d3e..0000000
--- a/backend/app/domains/admin/auth/exceptions.py
+++ /dev/null
@@ -1,119 +0,0 @@
-"""
-Admin Authentication Exception Classes
-
-This module defines custom exceptions for admin authentication operations,
-providing detailed error information for JWT token validation, organization
-membership verification, and admin authorization failures.
-"""
-
-from typing import Optional, Dict, Any
-
-
-class AdminAuthenticationError(Exception):
-    """Base exception for admin authentication errors"""
-    
-    def __init__(self, message: str, error_code: str = "AUTH_ERROR", details: Optional[Dict[str, Any]] = None):
-        self.message = message
-        self.error_code = error_code
-        self.details = details or {}
-        super().__init__(self.message)
-
-
-class InvalidJWTTokenError(AdminAuthenticationError):
-    """Raised when JWT token is invalid, malformed, or expired"""
-    
-    def __init__(self, message: str = "Invalid or expired JWT token", token_error: Optional[str] = None):
-        details = {"token_error": token_error} if token_error else {}
-        super().__init__(
-            message=message,
-            error_code="INVALID_JWT_TOKEN",
-            details=details
-        )
-
-
-class OrganizationMembershipRequiredError(AdminAuthenticationError):
-    """Raised when user is not a member of the required admin organization"""
-    
-    def __init__(
-        self, 
-        message: str = "Admin organization membership required",
-        user_id: Optional[str] = None,
-        required_organization_id: Optional[str] = None,
-        user_organizations: Optional[list] = None
-    ):
-        details = {
-            "user_id": user_id,
-            "required_organization_id": required_organization_id,
-            "user_organizations": user_organizations or []
-        }
-        super().__init__(
-            message=message,
-            error_code="ORGANIZATION_MEMBERSHIP_REQUIRED",
-            details=details
-        )
-
-
-class InvalidOrganizationError(AdminAuthenticationError):
-    """Raised when organization data in token is invalid or missing"""
-    
-    def __init__(
-        self, 
-        message: str = "Invalid or missing organization information",
-        organization_id: Optional[str] = None,
-        validation_error: Optional[str] = None
-    ):
-        details = {
-            "organization_id": organization_id,
-            "validation_error": validation_error
-        }
-        super().__init__(
-            message=message,
-            error_code="INVALID_ORGANIZATION",
-            details=details
-        )
-
-
-class ClerkAPIError(AdminAuthenticationError):
-    """Raised when Clerk API calls fail"""
-    
-    def __init__(
-        self, 
-        message: str = "Clerk API error",
-        api_endpoint: Optional[str] = None,
-        status_code: Optional[int] = None,
-        response_body: Optional[str] = None
-    ):
-        details = {
-            "api_endpoint": api_endpoint,
-            "status_code": status_code,
-            "response_body": response_body
-        }
-        super().__init__(
-            message=message,
-            error_code="CLERK_API_ERROR",
-            details=details
-        )
-
-
-class InsufficientPermissionsError(AdminAuthenticationError):
-    """Raised when user has valid organization membership but insufficient admin permissions"""
-    
-    def __init__(
-        self, 
-        message: str = "Insufficient admin permissions",
-        user_id: Optional[str] = None,
-        organization_id: Optional[str] = None,
-        required_role: Optional[str] = None,
-        user_role: Optional[str] = None
-    ):
-        details = {
-            "user_id": user_id,
-            "organization_id": organization_id,
-            "required_role": required_role,
-            "user_role": user_role
-        }
-        super().__init__(
-            message=message,
-            error_code="INSUFFICIENT_PERMISSIONS",
-            details=details
-        )
\ No newline at end of file
